{"version":3,"sources":["../../../../myapp/public/javascripts/Graph.js"],"names":["Vertex","require","Edge","Cluster","app","Graph","n","m","vertices","edges","maxDegree","clusters","visited","stack","time","tin","lowlink","components","cutPoints","bridges","vertex_array","edge_list","adjacency_list","d1","Date","t1","getTime","calcDegrees","d2","t2","console","log","arrayForm","d3","t3","edgeList","d4","t4","adjacencyList","d5","t5","maxDeg","forEach","edge","vfirst","degree","vsecond","vert","max","deg","K","push","sort","a","b","core_val","deg_array","vert1index","index","vert2index","vert2","get","has","i","length","u","BCCUtil","p","children","cutPoint","len","v","min","component","x","pop","verts","pos","bin","neighbors","du","pu","pw","w","e","e1","e2","weight","a_list","i1","i2","v1","v2","seed","w_func","weight_function","increased","cluster","wP","wE","wI","clust_prime","remove","add","Math","random","module","exports"],"mappings":"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","file":"Graph.js","sourcesContent":["const Vertex = require('./Vertex');\nconst Edge = require('./Edge');\nconst Cluster = require('./Cluster');\nconst app = require('../../app');\n\nclass Graph {\n    constructor(n, m, vertices, edges) {\n        this.vertices = vertices;\n        this.edges = edges;\n        this.n = n;\n        this.m = m;\n        this.maxDegree = 0;\n        this.clusters = {};\n\n        this.visited = [];\n        this.stack = [];\n        this.time = 0;\n        this.tin = [n];\n        this.lowlink = [n];\n        this.components = [];\n        this.cutPoints = [];\n        this.bridges = [];\n        this.vertex_array = [];\n        this.edge_list = [];\n        this.adjacency_list = [];\n    }\n\n    init() {\n        let d1 = new Date();\n        let t1 = d1.getTime();\n\n        this.calcDegrees();\n        let d2 = new Date();\n        let t2 = d2.getTime();\n        console.log(\"Calculated Degrees in \" + (t2 - t1) + \" seconds.\");\n\n        // this.findNeighbors();\n        // console.log(\"Calculated Neighbors\");\n\n        this.vertex_array = this.arrayForm();\n        let d3 = new Date();\n        let t3 = d3.getTime();\n        console.log(\"Calculated ArrayForm in \" + (t3 - t2) + \" seconds.\");\n\n        this.edge_list = this.edgeList();\n        let d4 = new Date();\n        let t4 = d4.getTime();\n        console.log(\"Calculated EdgeList in \" + (t4 - t3) + \" seconds.\");\n\n        this.adjacency_list = this.adjacencyList();\n        let d5 = new Date();\n        let t5 = d5.getTime();\n        console.log(\"Calculated AdjacancyList in \" + (t5 - t4) + \" seconds.\");\n    }\n\n    calcDegrees() {\n        let maxDeg = 0;\n        this.edges.forEach(function (edge) {\n            edge.vfirst.degree += 1;\n            edge.vsecond.degree += 1;\n        });\n\n        this.vertices.forEach(function (vert) {\n            maxDeg = max(maxDeg, vert.degree);\n        });\n\n        this.maxDegree = maxDeg;\n    }\n\n    kcore() {\n        let deg = [];\n        let K = [];\n        let vertices = this.vertex_array;\n        let edges = this.edges;\n\n        vertices.forEach(function (vert) {\n            deg.push(vert);\n        });\n\n        deg.sort(function (a, b) {\n            return a.degree - b.degree;\n        });\n\n        vertices.forEach(function (vert) {\n            vert.core_val = vert.degree;\n            edges.forEach(function (edge) {\n                if (edge.vfirst === vert) {\n                    if (edge.vsecond.degree > edge.vfirst.degree) {\n                        edge.vsecond.degree -= 1;\n                    }\n                }\n                else if (edge.vsecond === vert) {\n                    if (edge.vfirst.degree > edge.vsecond.degree) {\n                        edge.vfirst.degree -= 1;\n                    }\n                }\n            });\n        });\n\n        // deg.forEach(function (vert) {\n        //     K[vert.index] = vert.degree;\n        //     edges.forEach(function (edge) {\n        //         if (edge.vfirst === vert) {\n        //             if (deg[edge.vsecond.index] > deg[edge.vfirst.index]){\n        //                 deg[edge.vsecond.index] -= 1;\n        //             }\n        //         }\n        //         else if (edge.vsecond === vert) {\n        //             if (deg[edge.vfirst.index] > deg[edge.vsecond.index]){\n        //                 deg[edge.vfirst.index] -= 1;\n        //             }\n        //         }\n        //     });\n        //     deg.sort(function (a, b) {\n        //         return a.degree - b.degree;\n        //     });\n        // });\n\n        // vertices.forEach(function (v) {\n        //     console.log(\"\" + (v.index + 1) + \"\\thas coreness: \" + v.core_val);\n        // });\n        return K;\n    }\n\n    kcore_imp() {\n        let K = [];\n        let deg_array = this.vertex_array;\n        let adjacency_list = this.adjacency_list;\n        let vertices = this.vertices;\n        let edges = this.edges;\n\n        // Search through array of vertices sorted by degree\n        deg_array.forEach(function (vert) {\n            vert.core_val = vert.degree;\n            let vert1index = vert.index;\n\n            // Inspect incident edges to current vertex using adjacency list\n            adjacency_list[vert1index].forEach(function (vert2index) {\n                let vert2 = vertices.get(vert2index);\n\n                // Check for the edge in the edges set\n                // Decrement the degree of the vertex with higher degree (simulates removing the vertex of smaller degree)\n                if (edges.has(vert.index + \" \" + vert2index)) {\n                    let edge = edges.get(vert.index + \" \" + vert2index);\n                    if (edge.vsecond.degree > edge.vfirst.degree) {\n                        edge.vsecond.degree -= 1;\n                    }\n                }\n                else if (edges.has(vert2index + \" \" + vert.index)) {\n                    let edge = edges.get(vert2index + \" \" + vert.index);\n                    if (edge.vfirst.degree > edge.vsecond.degree) {\n                        edge.vfirst.degree -= 1;\n                    }\n                }\n            });\n        });\n\n        // vertices.forEach(function (v) {\n        //     console.log(\"\" + (v.index + 1) + \"\\thas coreness: \" + v.core_val);\n        // });\n    }\n\n    BCCDecomp() {\n        for (let i = 0; i < this.n; i++) {\n            this.visited[i] = false;\n        }\n        console.log(this.visited);\n\n        for (let i = 0; i < this.vertex_array.length; i++) {\n            let u = this.vertex_array[i].index;\n            if (this.visited[u] === false) {\n                this.BCCUtil(u, -1);\n            }\n        }\n    }\n\n    BCCUtil(u, p) {\n        this.visited[u] = true;\n        this.lowlink[u] = this.tin[u] = this.time++;\n        this.stack.push(u);\n        let children = 0;\n        let cutPoint = false;\n\n        let len = this.adjacency_list[u].length;\n        for (let i = 0; i < len; i++) {\n            let v = this.adjacency_list[u][i];\n            if (v === p)\n                return;\n            if (this.visited[v]) {\n                // lowlink[u] = Math.min(lowlink[u], lowlink[v]);\n                this.lowlink[u] = min(this.lowlink[u], this.tin[v]);\n            } else {\n                this.BCCUtil(v, u);\n                this.lowlink[u] = min(this.lowlink[u], this.lowlink[v]);\n                cutPoint |= this.lowlink[v] >= this.tin[u];\n                //if (lowlink[v] == tin[v])\n                if (this.lowlink[v] > this.tin[u])\n                    this.bridges.push(\"(\" + u + \",\" + v + \")\");\n                children += 1;\n            }\n\n            if (p === -1)\n                cutPoint = children >= 2;\n            if (cutPoint)\n                this.cutPoints.push(u);\n            if (this.lowlink[u] === this.tin[u]) {\n                let component = [];\n                while (true) {\n                    let x = this.stack.pop();\n                    component.push(x);\n                    if (x === u)\n                        break;\n                }\n                this.components.push(component);\n            }\n        }\n    }\n\n    BZKcore() {\n        let verts = this.arrayForm();\n        let pos = [], bin = [];\n\n        for (let i = 0; i <= this.maxDegree; i++) {\n            bin[i] = 0;\n        }\n\n        for (let i = 0; i < this.n; i++) {\n            pos[verts[i]] = i;\n        }\n\n        let deg = verts[0].degree;\n        for (let i = 0, deg; i < this.n - 1; i++) {\n            while (deg === verts[i].degree) {\n                i++;\n            }\n            deg = verts[i].degree;\n            bin[deg] = i;\n        }\n\n        for (let i = 0; i < this.n - 1; i++) {\n            let v = verts[i];\n\n            v.neighbors.forEach(function (u) {\n                if (u.degree > v.degree) {\n                    let du = u.degree;\n                    let pu = pos[u.index];\n                    let pw = bin[du];\n                    let w = verts[pw];\n                    if (u.index !== w) {\n                        pos[u.index] = pw;\n                        pos[w] = pu;\n                        verts[pu] = w;\n                        verts[pw] = u;\n                    }\n                    bin[du] += 1;\n                    u.degree -= 1;\n                }\n            })\n\n        }\n\n        this.vertices.forEach(function (v) {\n            console.log(\"\" + (v.index + 1) + \"\\thas coreness: \" + v.core_val);\n        });\n    }\n\n    arrayForm() {\n        let verts = [];\n        for (let i = 0; i < this.n; i++) {\n            if (this.vertices.has(i)) {\n                verts.push(this.vertices.get(i));\n            }\n            else {\n                verts.push(null);\n            }\n        }\n        verts.sort(function (a, b) {\n            return (a.degree > b.degree) ? 1 : 0;\n        });\n        return verts;\n    }\n\n    edgeList() {\n        let edge_list = [];\n        this.edges.forEach(function (e) {\n            edge_list.push(e);\n        });\n        edge_list.sort(function (e1, e2) {\n            return (e1.weight > e2.weight) ? 1 : 0;\n        });\n        return edge_list;\n    }\n\n    adjacencyList() {\n        let a_list = [];\n        for (let i = 0; i < this.n; i++) {\n            a_list[i] = []\n        }\n        this.edge_list.forEach(function (e) {\n            let i1 = e.vfirst.index;\n            let i2 = e.vsecond.index;\n            a_list[i1].push(i2);\n            a_list[i2].push(i1);\n        });\n        for (let i = 0; i < this.n; i++) {\n            a_list[i].sort();\n        }\n        return a_list;\n    }\n\n    findNeighbors() {\n        let vertices = this.vertices;\n        let edges = this.edges;\n        vertices.forEach(function (v) {\n            edges.forEach(function (e) {\n                if (e.vfirst === v) {\n                    v.neighbors.push(e.vsecond);\n                }\n                if (e.vsecond === v) {\n                    v.neighbors.push(e.vfirst);\n                }\n            });\n            v.neighbors.sort(function (v1, v2) {\n                return (v1.index < v2.index) ? v1 : v2;\n            });\n        });\n    }\n\n    findVertexByIndex(index) {\n        this.vertices.forEach(function (v) {\n            if (v.index === index) {\n                return v;\n            }\n        });\n    }\n\n    iterativeScan(seed, w_func) {\n        let weight_function, increased = true, cluster = seed;\n        let vertices = this.vertices;\n        switch (w_func) {\n            case 0:\n                weight_function = wP;\n                break;\n            case 1:\n                weight_function = wE;\n                break;\n            case 2:\n                weight_function = wI;\n                break;\n        }\n        let w = weight_function(cluster);\n        while (increased) {\n            vertices.forEach(function (v) {\n                let clust_prime = cluster;\n                if (cluster.has(v)) {\n                    clust_prime.remove(v);\n                }\n                else {\n                    clust_prime.add(v);\n                }\n                if (weight_function(clust_prime) > weight_function(cluster)) {\n                    cluster = clust_prime;\n                }\n            });\n            if (weight_function(cluster) === w) {\n                increased = false;\n            }\n            else {\n                w = weight_function(cluster);\n            }\n        }\n\n        return cluster;\n    }\n}\n\nfunction wP(cluster) {\n    return Math.random() * 20 + 1 | 0;\n}\n\nfunction wE(cluster) {\n    return Math.random() * 20 + 1 | 0;\n}\n\nfunction wI(cluster) {\n    return Math.random() * 20 + 1 | 0;\n}\n\nfunction max(a, b) {\n    return (a >= b) ? a : b;\n}\n\nfunction min(a, b) {\n    return (a <= b) ? a : b;\n}\n\nmodule.exports = Graph;\n"]}