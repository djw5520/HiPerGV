{"version":3,"sources":["../../../../myapp/public/javascripts/Parser.js"],"names":["app","require","Vertex","Edge","Graph","fs","readline","Stream","parseInputTabs","filename","delimiter","Promise","resolve","reject","delim","instream","createReadStream","outstream","rl","createInterface","x","n","m","index","vertices","Map","edges","lookup","G","on","line","specs","split","parseInt","v1","v2","v1index","v2index","verts","v1id","v2id","has","get","set","make_vertex","edge_id","edge","Math","random","console","log","size","err","id","module","exports"],"mappings":"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","file":"Parser.js","sourcesContent":["const app = require('./../../app');\nconst Vertex = require('./Vertex');\nconst Edge = require('./Edge');\nconst Graph = require('./Graph');\nconst fs = require('fs');\nconst readline = require('readline');\nconst Stream = require('stream');\n\nfunction parseInputTabs(filename, delimiter) {\n    return new Promise(function(resolve, reject){\n        let delim;\n        switch (delimiter) {\n            case \"t\":\n                delim = '\\t';\n                break;\n            case \"s\":\n                delim = ' ';\n                break;\n        }\n        let instream = fs.createReadStream(filename);\n        let outstream = new Stream;\n        let rl = readline.createInterface(instream, outstream);\n\n        let x = 0, n = 0, m = 0, index = 0;\n        let vertices = new Map();\n        let edges = new Map();\n        let lookup = new Map();\n        let G = new Graph(n, m, vertices, edges);\n\n        rl.on('line', function (line) {\n            //console.log(\"Line: \" + line);\n            if (x === 0) {\n                // Acquiring n and m for graph\n                let specs = line.split(delim);\n                n = parseInt(specs[0]);\n                m = parseInt(specs[1]);\n                G.n = n;\n                G.m = m;\n                x = 1;\n            }\n            else {\n                let v1, v2, v1index, v2index;\n\n                let verts = line.split(delim);\n\n                let v1id = verts[0];\n                let v2id = verts[1];\n\n                if (lookup.has(v1id)) {\n                    v1index = lookup.get(v1id);\n                }\n                else {\n                    v1index = index;\n                    lookup.set(v1id, v1index);\n                    index += 1;\n                }\n                if (lookup.has(v2id)) {\n                    v2index = lookup.get(v2id);\n                }\n                else {\n                    v2index = index;\n                    lookup.set(v2id, v2index);\n                    index += 1;\n                }\n\n                // If first vertex in list does not exist, add it to the list of vertices\n                if (!G.vertices.has(v1index)) {\n                    v1 = make_vertex(v1index, v1id);\n                    G.vertices.set(v1index, v1);\n\n                    // If second vertex in list does not exist, add it to the list of vertices\n                    if (!G.vertices.has(v2index)) {\n                        v2 = make_vertex(v2index, v2id);\n                        G.vertices.set(v2index, v2);\n                    }\n                    // Else acquire the already existing second vertex\n                    else {\n                        v2 = G.vertices.get(v2index);\n                    }\n                }\n                // Else acquire the already existing first vertex\n                else {\n                    v1 = G.vertices.get(v1index);\n\n                    // If second vertex in list does not exist, add it to the list of vertices\n                    if (!G.vertices.has(v2index)) {\n                        v2 = make_vertex(v2index, v2id);\n                        G.vertices.set(v2index, v2);\n                    }\n                    // Else acquire the already existing second vertex\n                    else {\n                        v2 = G.vertices.get(v2index);\n                    }\n                }\n\n                let edge_id = v1index + \" \" + v2index;\n                let edge = new Edge(edge_id, v1, v2, Math.random() * 20 + 1 | 0);\n                G.edges.set(edge_id, edge);\n            }\n        });\n\n        rl.on('close', function () {\n            console.log(\"Graph: \" + G.vertices.size);\n            if (G) {\n                resolve(G);\n            }\n            else {\n                const err = \"Could not read file.\";\n                reject(err);\n            }\n        });\n    });\n}\n\nfunction make_vertex(index, id) {\n    return new Vertex(\n        index,\n        id,\n        '#000080',\n        (Math.random() * 5 + 10) | 0,\n        (Math.random() * 500 + 1) | 0,\n        (Math.random() * 500 + 1) | 0\n    );\n}\n\nmodule.exports.parseInputTabs = parseInputTabs;\n"]}