{"version":3,"sources":["../../myapp/app.js"],"names":["express","require","path","favicon","logger","cookieParser","bodyParser","fs","Parser","Graph","Vertex","Edge","index","users","app","engine","renderFile","set","join","__dirname","use","json","urlencoded","extended","static","G","LH","filename","d1","Date","t1","getTime","process","argv","length","delimiter","parseInputTabs","then","init","kcore_imp","d2","t2","console","log","req","res","next","err","Error","status","locals","message","error","get","render","listen","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst favicon = require('serve-favicon');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst fs = require('fs');\n\nconst Parser = require('./public/javascripts/Parser');\nconst Graph = require('./public/javascripts/Graph');\nconst Vertex = require('./public/javascripts/Vertex');\nconst Edge = require('./public/javascripts/Edge');\n\nconst index = require('./routes/index');\nconst users = require('./routes/users');\n\nconst app = express();\n\n// view engine setup\napp.engine('html', require('ejs').renderFile);\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'html');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', index);\napp.use('/users', users);\n\nlet G, LH, filename = null;\n\nlet d1 = new Date();\nlet t1 = d1.getTime();\n\nif (process.argv.length === 4) {\n    filename = process.argv[2];\n    let delimiter = process.argv[3];\n\n    // Populate G with the Graph returned from Parser\n    Parser.parseInputTabs(filename, delimiter).then(function (G) {\n            LH = G;\n            LH.init();\n            LH.kcore_imp();\n\n            let d2 = new Date();\n            let t2 = d2.getTime();\n\n            console.log(\"Up and running in \" + (t2 - t1) + \" milliseconds\");\n        }\n    );\n\n    //\n    // LH.BCCDecomp();\n}\nelse {\n    console.log('Not enough arguments: please format you command as: \"npm start \\'testfile\\' t|s\"');\n}\n\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// error handler\napp.use(function (err, req, res, next) {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n    // render the error page\n    res.status(err.status || 500);\n    res.render('error');\n});\n\napp.listen(3000, function () {\n    console.log('Example app listening on port 3000!')\n});\nmodule.exports = app;\n"]}